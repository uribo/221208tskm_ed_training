---
title: "地図へのマッピング"
---

```{r}
#| include: false
library(readr)
library(here)
```

多くの統計データには、都道府県名やメッシュ、緯度経度の座標といった地理的な空間情報を含みます。
このような地理空間情報をもつデータ（地理空間データ）は地図上に投影することで内容の理解を深めることが期待できます。
また、地理空間データの操作により分析の幅を広げることができます。
Rの地理空間データを使って、これらの処理を行いましょう。

## 1. パッケージの読み込み

ここでもいくつかのパッケージを使います。
関数を利用するパッケージを次のコマンドで読み込みます。

```{r}
#| warning: false
#| message: false
library(dplyr) # データ操作
library(sf) # 地理空間データの操作
library(mapview) # 地図のインタラクティブな操作
library(ggplot2) # データ可視化
library(rnaturalearth) # パブリックドメインで利用可能な県単位のポリゴンデータ
library(rnaturalearthhires)
```

## 2. 地理空間データの用意

[オープンデータの活用](shelter.html)の中で取り上げた「緊急避難場所 (徳島県)」を再び利用します。
このデータは県内の市町村が指定する洪水災害発生時に利用可能な施設に関しての位置情報を記録したものでした。
このデータに含まれる位置情報（緯度、経度）をもとに、Rで地理空間データを作成してみます。

```{r}
#| include: false
df_hinanjyo <- 
  read_csv(
    file = here("data-raw/tksm_shelter_for_flood.csv"),
           locale = locale(encoding = "SHIFT-JIS")) |> 
  select(`市町村`, `タイトル`, `所在地`, `緯度`, `経度`, `分類`) |> 
  purrr::set_names(c("city", "title", "address", "latitude", "longitude", "type")) |> 
  mutate(city = stringr::str_extract(address, "(.{2}郡.{2,3}町|.{2,3}(市|町|村))"))
```

sfパッケージの`st_as_sf()`関数を使って、データフレーム中の緯度 `latitude`と経度 `longitude`の列の値をもとに地理空間情報データ（ポイント）に変換します。

```{r}
# 緯度経度の座標からポイントデータを生成
sf_hinanjyo <- 
  st_as_sf(df_hinanjyo,
           coords = c("longitude", "latitude"),
           crs = 4326)

glimpse(sf_hinanjyo)
```

`geometry`列に各施設の位置がポイントデータとして記録されています。

続いて、徳島県の形状を示すためのポリゴンデータを準備します。
ここではパブリックドメインで使用できる[Natural Earth](https://www.naturalearthdata.com)のデータをRから取得するrnaturalearthパッケージを用います。
次のコマンドで四国４県のポリゴンデータを用意します。

```{r}
# rnaturalearthから四国のポリゴンを準備する
ne_jpn_shikoku <- 
  rnaturalearth::ne_states(country = "Japan", returnclass = "sf") |> 
  filter(region == "Shikoku") |> 
  select(iso_3166_2, name)

ne_jpn_shikoku
```

このほか、行政区域のデータには[国土数値情報ダウンロードサービス](https://nlftp.mlit.go.jp/ksj/)の[`行政区域データ`](https://nlftp.mlit.go.jp/ksj/gml/datalist/KsjTmplt-N03-v3_1.html)などが利用できます。国土数値情報の行政区域データは市区町村別にポリゴンデータがあたえられているため、細かな地域の可視化や分析に役立ちます。

## 3. 地図の作成

Rでの地理空間データの可視化表現として、インタラクティブに操作できる地図、[グラフの作成](plot.html)の中で扱ったggplot2による静的な図の作成ができます。

### インタラクティブな地図の操作

避難場所の位置を地図上で確認します。

mapviewパッケージはインタラクティブに操作できる地図機能を提供します。
`mapview()`関数に対象の地理空間データを与えて実行すると、自在に動かせる地図の画面が表示されます。
以下に出力される地図を操作（移動、拡大・縮小、レイヤの変更、アイコンのクリック）をしてみましょう。

```{r}
mapview(sf_hinanjyo)
# 市町村別の塗り分け
# mapview(sf_hinanjyo, zcol = "city")
```

同様の出力として、避難所等の場所を地図上にマッピングするアプリケーションを[徳島県が公開](https://maps.pref.tokushima.lg.jp/hinansyotou/)しています。関心のある方はRでの出力と県のページを比較してみてください。


### 静的な地図の描画とレイヤの重ね合わせ

静的な地図はggplot2パッケージの`geom_sf()`関数により生成可能です。
これにより、徳島県の形状を表すポリゴンデータ、避難場所の位置を示すポイントデータの2つを重ね合わせた地図を作成できます。

```{r}
#| label: tokushima-shelter-location
#| fig-cap: 徳島県緊急避難場所の位置
ggplot() +
  geom_sf(data = filter(ne_jpn_shikoku, name == "Tokushima")) +
  geom_sf(data = sf_hinanjyo,
          aes(color = city),
          show.legend = FALSE)+
  coord_sf() +
  labs(title = "徳島県緊急避難場所の位置")
```

```{r}
#| eval: false
#| echo: false
sf_pref36 <- 
  st_read("~/Downloads/N03-20220101_36_GML/N03-22_36_220101.geojson")
ggplot() +
  geom_sf(data = sf_pref36) +
  geom_sf(data = sf_hinanjyo,
          aes(color = city),
          show.legend = FALSE)+
  coord_sf()
```

## 4. 地理空間データの処理

地理空間データの処理はsfパッケージを介して行います。
例えば、ポリゴンデータから面積を計算する、2地点（ポイント）間の距離を求める、などが可能です。

```{r}
# 面積の算出
st_area(ne_jpn_shikoku)

# 単位の変換
units::set_units(st_area(ne_jpn_shikoku), km^2)
```
```{r}
# 距離の計算
st_distance(
  sf_hinanjyo[1, ], # 板野町防災ステーション (徳島県板野郡板野町川端字新手崎18-1)
  sf_hinanjyo[10, ] # 阿南市クリーンピュア (阿南市熊谷町定方44)
)
```

```{r}
# ポリゴンの重心点
st_centroid(ne_jpn_shikoku)
```

sfパッケージで求めた値は、dplyrパッケージの`mutate()`関数と組み合わせることでデータフレームの列として格納できます。

```{r}
mutate(ne_jpn_shikoku,
       area = units::set_units(st_area(ne_jpn_shikoku), km^2))
```

応用例として、[徳島県立総合教育センター](https://www.tokushima-ec.ed.jp)(板野郡板野町犬伏字東谷1-7)から半径1km圏内にある避難場所を特定します。
まずは徳島県立総合教育センターの座標を`st_point()`関数内で定義し、ポイントデータを作成します。

```{r}
x <- 
  # 徳島県立総合教育センターの位置
  st_sfc(st_point(c(134.452485, 34.150387)), 
         # 座標参照系の指定
         crs = 4326)

# 位置を確認
mapview(x, map.types = "OpenStreetMap")
```

次に`st_buffer()`関数でポイントからバッファを生成します。
ここで引数distにバッファの大きさを与えて実行します。
今回は半径1kmのバッファとしたいので、`units::set_units(1, km)`を与えます。

```{r}
x_buffer1km <- 
  st_buffer(x,
            dist = units::set_units(1, km))

mapview(x_buffer1km, map.types = "OpenStreetMap")
```

```{r}
sf_hinanjyo_neighborhood <- 
  st_join(
  sf_hinanjyo,
  st_sf(x_buffer1km),
  left = FALSE)

sf_hinanjyo_neighborhood
```

`r nrow(sf_hinanjyo_neighborhood)`地点の避難場所が示されました。
これらの避難場所と徳島県立総合教育センターの距離を`st_dist()`関数で求めます。

```{r}
sf_hinanjyo_neighborhood <-
  mutate(sf_hinanjyo_neighborhood,
       distance = st_distance(geometry, x, by_element = FALSE))
```

最後に、避難場所の位置関係も確認しておきましょう。
mapviewパッケージではggplot2パッケージのように描画対象のオブジェクトを`+`演算子を使って
レイヤとして重ねられます。

```{r}
mapview(x_buffer1km) +
  mapview(sf_hinanjyo_neighborhood,
          zcol = "distance")
```

大きなバッファの内側に対象の`r nrow(sf_hinanjyo_neighborhood)`地点の避難場所が含まれることが確認できました。


## 5. まとめ
