[
  {
    "objectID": "plot.html",
    "href": "plot.html",
    "title": "グラフの作成",
    "section": "",
    "text": "数値や表形式でのデータ表現は、データの内容を示すのに使うことができます。 一方でデータの量が多い場合やデータ間の比較が困難な場合があります。 グラフによるデータの表現は、データの傾向や特徴を視覚的に示すのに適しています。\nここでは、独立行政法人統計センターが公開する教育用標準データセットから、身近な統計データをグラフ上に可視化する例を示します。"
  },
  {
    "objectID": "plot.html#データの用意",
    "href": "plot.html#データの用意",
    "title": "グラフの作成",
    "section": "データの用意",
    "text": "データの用意\n教育用標準データセットは、データサイエンス演習、統計教育などに活用されることを期待したデータとして独立行政法人統計センターが公開しているものです。 データにはいくつかの種類があり、都道府県・市区町村別の集計値、時系列別での値などがあります。"
  },
  {
    "objectID": "plot.html#グラフ表現",
    "href": "plot.html#グラフ表現",
    "title": "グラフの作成",
    "section": "グラフ表現",
    "text": "グラフ表現\n\n折れ線グラフ\n棒グラフ\n（円グラフ）\n散布図\nヒストグラム\n箱ひげ図\n\n\nlibrary(ggplot2)\nlibrary(ggrepel)\nggplot(df_ssdse_b_tiny_shikoku,\n       aes(as.character(`年度`), `出生数`, group = `都道府県`)) +\n  geom_line()\nggplot(df_ssdse_b_tiny_shikoku,\n       aes(`年平均気温`, `降水量（年間）`)) +\n  geom_point()\n\ndf_ssdse_b_tiny |> \n  filter(`都道府県` == \"徳島県\") |> \n  ggplot(aes(as.character(`年度`), `降水量（年間）`)) +\n  geom_bar(stat = \"identity\")\n\n# 積み上げ\ndf_ssdse_b_tiny_shikoku |> \n  filter(`年度` == 2019) |> \n  select(`都道府県`, \n         `幼稚園数`, `小学校数`, `中学校数`, `高等学校数`, `短期大学数`, `大学数`) |> \n  tidyr::pivot_longer(cols = c(`幼稚園数`, `小学校数`, `中学校数`, `高等学校数`, `短期大学数`, `大学数`),\n                      names_to = \"stage\",\n                      values_to = \"value\") |> \n  ggplot(aes(`都道府県`, value, group = stage, fill = stage)) +\n  geom_bar(stat = \"identity\", position = \"stack\")"
  },
  {
    "objectID": "shelter.html",
    "href": "shelter.html",
    "title": "オープンデータの活用",
    "section": "",
    "text": "オープンデータの取得から操作、可視化まで。\n徳島県オープンデータポータルサイトから緊急避難場所 (徳島県)のデータをRで読み込み、処理します。 リンク先にはいくつかのデータがあります。ここでは「洪水_登録データ一覧_2022年10月26日.csv (CSV 121KB)」を例に解説を行います。"
  },
  {
    "objectID": "shelter.html#パッケージの読み込み",
    "href": "shelter.html#パッケージの読み込み",
    "title": "オープンデータの活用",
    "section": "1. パッケージの読み込み",
    "text": "1. パッケージの読み込み\nRではパッケージと呼ばれる機能拡張をユーザーが自由に導入することが可能です。 パッケージの導入により、Rで実現可能な枠が広がります。 Rのインストール時に利用可能な、組み込みパッケージがありますが、これに加えていくつかのパッケージを導入しておくと、Rでの作業が快適になります。\nパッケージの読み込みはlibrary({パッケージ名})の形式で行います。 次のコードではいくつかのパッケージを読み込んでいます。 各パッケージがどのような機能をもつか、コメントとして示しました。 Rでは# 以降の文章はコメントとして扱われます。 コメントは、後からコードを見返した際、どのような処理をなぜ行ったのかを理解するのに役立つため、必要に応じて書いておくことが望ましいです。\n\nlibrary(readr) # 表形式データの読み込み\nlibrary(dplyr) # データ操作\nlibrary(ggplot2) # データ可視化\nlibrary(here) # ファイルの指定を容易にする"
  },
  {
    "objectID": "shelter.html#データの読み込み",
    "href": "shelter.html#データの読み込み",
    "title": "オープンデータの活用",
    "section": "2. データの読み込み",
    "text": "2. データの読み込み\nデータをRへ読み込むには、次に示す通り、いくつかの方法があります。\n\n対象ファイルを利用しているコンピュータのローカルディスクへ保存し、ファイルが置かれた場所（パス）を指定する\nインターネット上に置かれたファイルのURLを指定する\nRStudioのImport Dataset機能\n\nここでは2の方法でデータを読み込みます。read_csv()関数のfile引数にデータのURLを指定しましょう。 徳島県オープンデータポータルサイト、洪水_登録データ一覧_2022年10月26日.csvの欄にあるURLをコピーをクリックします。 コピーしたURLをfile引数に file = \"コピーしたURL\"の形式で記述します。URLを引用符 \" で囲む必要がある点に注意してください。 Rでは文字列を引用符で囲むルールが存在します。 また、locale引数にもファイル読み込みのためのオプションを指定し、コードを実行します。\n\nread_csv(\n    file = \"コピーしたURL\",\n    # 読み込みのオプション\n    # 日本語が使われる一部のファイルを読み込むと、文字化けをすることがあります。\n    # このファイルでも日本語が使われているため、次のオプションの指定で文字化けを回避します。\n    locale = locale(encoding = \"SHIFT-JIS\"))\n\nRでは処理の結果を再利用するために、オブジェクトを利用します。 読み込んだデータに対して、処理を加えるためにオブジェクトとして保存しましょう。 オブジェクトへの保存は「代入」とも呼ばれます。 代入は <- （代入演算子）の左側に保存先のオブジェクト名、右側に保存したい処理内容を記述して実行します。\n\n# 読み込んだcsvの内容を df_hinanjyo として記録する\ndf_hinanjyo <- \n  read_csv(\n    file = \"https://opendata.pref.tokushima.lg.jp/dataset/487/resource/6553/洪水_登録データ一覧_2022年10月26日_15時14分.csv\",\n           locale = locale(encoding = \"SHIFT-JIS\"))\n\nオブジェクトに保存した内容（値）はいつでも呼び出すことができます。\n\n# コンソールでオブジェクト名を実行すると値が呼び出される\ndf_hinanjyo\n\n読み込んだファイルのように、表形式で表現されるデータのことをRではデータフレームと呼びます。 データフレームは表計算ソフトのように1行1列それぞれに値が格納されています。\n\n\n\n洪水_登録データ一覧を表計算ソフトで表示した画面。Rでの読み込み結果が正しく行われていることを確認しましょう。\n\n\n上記のようにオブジェクト名をコンソールで実行してデータフレームを表示することもできますが、 データフレームの中身を確認する関数はいくつかあります。\n\nView(df_hinanjyo)\n\n\n# データ中の各変数の値を縦方向に出力します\nglimpse(df_hinanjyo)\n\nRows: 701\nColumns: 19\n$ 市町村   <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ タイトル <chr> \"板野町防災ステーション\", \"新野小学校\", \"新野東小学校\", \"阿南…\n$ 所在地   <chr> \"徳島県板野郡板野町川端字新手崎18-1\", \"阿南市新野町南宮ノ久保…\n$ 緯度     <dbl> 34.13761, 33.84699, 33.84517, 33.87679, 33.87358, 33.87303, 3…\n$ 経度     <dbl> 134.4729, 134.5811, 134.6042, 134.6283, 134.6118, 134.5819, 1…\n$ 写真1    <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ 写真2    <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ 写真3    <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ 写真4    <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ 写真5    <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ 写真6    <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ 写真7    <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ 写真8    <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ 写真9    <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ 写真10   <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ 連絡先   <chr> \"088-637-5585\", \"0884-36-2021\", \"0884-36-2103\", \"0884-26-0203…\n$ 分類     <chr> \"指定緊急避難場所（法指定）\", \"指定緊急避難場所（法指定）\", \"…\n$ 災害種別 <chr> \"洪水,崖崩れ等,地震,大規模な火事,内水氾濫\", \"洪水,崖崩れ等,地…\n$ 備考     <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n\n\n\n\n\n\n\n\nノート\n\n\n\nインターネットが利用できない環境では、URLを指定したデータの読み込みが行えません。 ローカルディスクにファイルをダウンロードしておくことで、インターネット非接続状態でもファイルの読み込みが可能になります。 次のコマンドを実行するとファイルのダウンロード、ローカルでのパスを指定したファイルの読み込みが行われます。\n\nfs::dir_create(here(\"data-raw\"))\n# インターネット上のファイルをダウンロードする（ここではインターネット接続が必要です）\ndownload.file(\"https://opendata.pref.tokushima.lg.jp/dataset/487/resource/6553/洪水_登録データ一覧_2022年10月26日_15時14分.csv\",\n              # data-rawフォルダの中に tksm_shelter_for_flood.csv として保存します\n              here(\"data-raw/tksm_shelter_for_flood.csv\"))\n\n# 保存したcsvファイルのパスをfile引数で指定します\ndf_hinanjyo <- \n  read_csv(\n    file = here(\"data-raw/tksm_shelter_for_flood.csv\"),\n           locale = locale(encoding = \"SHIFT-JIS\"))\n\n\n\n\nダウンロードしたファイルとフォルダの関係\n\n\n\n\n\n\n\n\n\n\nノート\n\n\n\n上記の処理はRStudioのFile import機能を使っても行えます。 この機能には、データの読み込み結果をプレビューできる、Rのコード入力を最低限に抑えることができるなどの利点があります。\n\n\n\nRStudioのImport dataset機能を使ったデータ読み込み"
  },
  {
    "objectID": "shelter.html#データの操作加工",
    "href": "shelter.html#データの操作加工",
    "title": "オープンデータの活用",
    "section": "3. データの操作・加工",
    "text": "3. データの操作・加工\n\nデータフレームを確認するとわかるように、このデータには複数の「写真」の列が存在します。 これらの列の中には値がありません。 値がない状態を「欠損」は呼ばれ、そのことを表現するために欠損値 (NA) が使われます。 こうした欠損値からなる列は不要と判断し、列を絞り込みましょう。 列の選択はselect()関数で行います。この関数の引数に、残したい、または削除したい変数を記述して実行します1。 関心のある列にデータを制限することで、データの見通しがよくなります。\n\ndf_hinanjyo <- \n  # 関心のある列を選び直す\n  select(df_hinanjyo,\n         `市町村`, `タイトル`, `所在地`, `緯度`, `経度`, `分類`)\nglimpse(df_hinanjyo)\n\nRows: 701\nColumns: 6\n$ 市町村   <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ タイトル <chr> \"板野町防災ステーション\", \"新野小学校\", \"新野東小学校\", \"阿南…\n$ 所在地   <chr> \"徳島県板野郡板野町川端字新手崎18-1\", \"阿南市新野町南宮ノ久保…\n$ 緯度     <dbl> 34.13761, 33.84699, 33.84517, 33.87679, 33.87358, 33.87303, 3…\n$ 経度     <dbl> 134.4729, 134.5811, 134.6042, 134.6283, 134.6118, 134.5819, 1…\n$ 分類     <chr> \"指定緊急避難場所（法指定）\", \"指定緊急避難場所（法指定）\", \"…\n\n\n加えて、日本語の列名から英語での列名に変更します。\n\n# 緯度 ... latitude\n# 経度 ... longitude\ncolnames(df_hinanjyo) <- \n  c(\"city\", \"title\", \"address\", \"latitude\", \"longitude\", \"type\")\nhead(df_hinanjyo)\n\n# A tibble: 6 × 6\n  city  title                  address                     latit…¹ longi…² type \n  <lgl> <chr>                  <chr>                         <dbl>   <dbl> <chr>\n1 NA    板野町防災ステーション 徳島県板野郡板野町川端字新…    34.1    134. 指定…\n2 NA    新野小学校             阿南市新野町南宮ノ久保70-1     33.8    135. 指定…\n3 NA    新野東小学校           阿南市新野町是国37-2           33.8    135. 指定…\n4 NA    阿南第二中学校         阿南市内原町竹ノ内口143-1      33.9    135. 指定…\n5 NA    桑野小学校             阿南市桑野町岡元40-1           33.9    135. 指定…\n6 NA    山口小学校             阿南市山口町末広12-1           33.9    135. 指定…\n# … with abbreviated variable names ¹​latitude, ²​longitude\n\n\nここでcity列に注目します。 この列は避難所の位置する市町村を記録すべき列ですが、いずれの行にも値は含まれません。\n\n# cityの項目を数える --> NA (欠損値)\ncount(df_hinanjyo, city)\n\n# A tibble: 1 × 2\n  city      n\n  <lgl> <int>\n1 NA      701\n\n\n\n# 欠損値の行を確認\nfilter(df_hinanjyo, is.na(city))\n# 欠損値でない行を確認\nfilter(df_hinanjyo, !is.na(city))\n\nそこで避難所の住所を記録したaddress列の値から市町村名の部分だけを抜き出して、 city列を上書きすることを考えましょう。 addressには徳島県板野郡板野町川端字新手崎18-1のように住所が文字列として記録されています。\n\n# 1行目の住所を表示\ndf_hinanjyo$address[1]\n\n[1] \"徳島県板野郡板野町川端字新手崎18-1\"\n\n# すべての住所を表示\n# df_hinanjyo$address\n\n# 県名を含む住所から市町村の部分を取り出す\nstringr::str_extract(df_hinanjyo$address[1], \n                     pattern = \"(.{2}郡.{2,3}町|.{2,3}(市|町|村))\")\n\n[1] \"板野郡板野町\"\n\n\n\nstringr::str_remove(df_hinanjyo$address[1], \"徳島県\")\nstringr::str_extract(df_hinanjyo$address[1], \".{2}郡.{2,3}町\")\nx <- \n  which(is.na(stringr::str_extract(df_hinanjyo$address, \"(.{2}郡.{2,3}町|.{2,3}(市|町|村))\")))\ndf_hinanjyo$address[x]\n\nすべての行にこの処理を適用しましょう。 mutate()関数を使って、任意の処理を各行へ適用可能です。\n\ndf_hinanjyo <- \n  mutate(df_hinanjyo,\n         # 住所から市町村名の部分を取り出し、city列に格納する\n         city = stringr::str_extract(address, \"(.{2}郡.{2,3}町|.{2,3}(市|町|村))\"))\n\n結果を確認します。 先ほどcount()関数でcity列の項目を数えた際には欠損値だけでしたが、 今度は市町村別の避難場所のカウントが正しく行われているように見えます。\n\ndf_city_count <- \n  # sort = TRUE ... 市町村の項目が多い順（降順）に出力する\n  count(df_hinanjyo, city, sort = TRUE)\n\ndf_city_count\n\n# A tibble: 46 × 2\n   city         n\n   <chr>    <int>\n 1 三好市     190\n 2 <NA>        75\n 3 鳴門市      72\n 4 阿南市      52\n 5 板野町      35\n 6 勝浦町      34\n 7 松茂町      21\n 8 石井町      21\n 9 吉野川市    18\n10 美馬市      17\n# … with 36 more rows\n\n\n\n# いくつかの行は欠損値のまま\nfilter(df_hinanjyo, is.na(city))\n\n# A tibble: 75 × 6\n   city  title            address                  latitude longitude type     \n   <chr> <chr>            <chr>                       <dbl>     <dbl> <chr>    \n 1 <NA>  明谷小学校       一宇字大屋内４３０４番地     33.9      134. 指定緊急…\n 2 <NA>  平地区集会所     一宇字平３６９１番地１       33.9      134. 指定緊急…\n 3 <NA>  葛籠地区集会所   一宇字葛籠６３０８番地       33.9      134. 指定緊急…\n 4 <NA>  錦谷小学校       一宇字川又９５５番地１       33.9      134. 指定緊急…\n 5 <NA>  河内地区集会所   一宇字大佐古６７０番地１     33.9      134. 指定緊急…\n 6 <NA>  大野地区集会所   一宇字大野２２２番地         33.9      134. 指定緊急…\n 7 <NA>  須貝瀬集会所     一宇字久藪２８８番地         33.9      134. 指定緊急…\n 8 <NA>  伊良原地区集会所 一宇字伊良原１２３番地       33.9      134. 指定緊急…\n 9 <NA>  久藪地区集会所   一宇字久藪２０５番地３       33.9      134. 指定緊急…\n10 <NA>  一宇公民館       一宇字赤松６番地２           34.0      134. 指定緊急…\n# … with 65 more rows"
  },
  {
    "objectID": "shelter.html#グラフの作成",
    "href": "shelter.html#グラフの作成",
    "title": "オープンデータの活用",
    "section": "4. グラフの作成",
    "text": "4. グラフの作成\n続いて、市町村別に避難場所の数を集計したデータ df_city_count をもとに、簡単なグラフを作成してみましょう。\n避難場所の数（数量）を市町村で比較する際、適したグラフの種類は何でしょうか。 ここでは棒グラフと円グラフによるグラフ作成の例を示します。\n\np <- \n  ggplot(data = df_city_count,\n       aes(city, n)) +\n  # 棒グラフの指定\n  geom_bar(\n    stat = \"identity\", # n （市町村別の避難場所の数）が棒の高さに用いられる\n    fill = \"#3F54B4\" # 棒の塗りつぶしの色\n  )\n\np\n\n\n\n\n徳島県内緊急避難場所（災害種別 洪水）の市町村別件数\n\n\n\n\ngeom_bar()関数を指定して棒グラフを描画しましたが、このグラフはいくつかの理由で情報を適切に伝えられていません。 例えば、\n\nx軸の市町村の間隔が狭いために文字が潰れてしまっている\nx軸の市町村の並びと避難場所の件数に関係がなく、関係を読み取りにくい\n\nこの問題を改善してみましょう。 まず、1の問題はx軸に複数の項目を並べる際に生じる問題です。 特に項目数が多い場合、横幅を広くとらないと文字が潰れてしまいます。 根本的な対策は、x軸とy軸を入れ替えて表示することです。 これにより、項目の間隔を気にする必要がなくなります（ただし高さを十分にする）。 すでに作成したグラフに対して、coord_flip()関数を適用するとx軸とy軸の入れ替えが行われます。\n\np +\n  coord_flip()\n\n\n\n\n徳島県内緊急避難場所（災害種別 洪水）の市町村別件数（市町村別の並びを縦に変更）\n\n\n\n\n続いて市町村名と避難場所の件数の関係をわかりやすく伝える工夫をしてみます。 現在の図は適当に市町村名が並んでいるように見えるため、避難場所の件数で入れ替えるようにします。 合わせてグラフ全体の見た目も調整しておきましょう。\n\np <- \n  ggplot(data = df_city_count,\n       aes(forcats::fct_reorder(city, n), n)) +\n  geom_bar(stat = \"identity\",\n           fill = \"#3F54B4\") +\n  coord_flip() +\n  xlab(NULL) +\n  ylab(\"避難場所の件数\") +\n  labs(title = \"徳島県内緊急避難場所（災害種別 洪水）の市町村別件数\")\n\np\n\n\n\n\n徳島県内緊急避難場所（災害種別 洪水）の市町村別件数"
  },
  {
    "objectID": "shelter.html#まとめ",
    "href": "shelter.html#まとめ",
    "title": "オープンデータの活用",
    "section": "まとめ",
    "text": "まとめ"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "高等学校情報科におけるR言語の活用",
    "section": "",
    "text": "このページは、令和4年度（2022年度）徳島県教科「情報」指導者研修のための資料です。 R言語によるプログラミングを通し、教科「情報」で扱われるいくつかの単元の内容を学びます。 具体的には、「プログラミング」、「データの可視化」、「オープンデータの活用」を扱います。 またQuartoを使ったレポート作成の方法についても解説します。\n\n\n研修内容はこのウェブページ上またはスライド（公開準備中）から閲覧可能です。 研修を通してR言語によるプログラミングを行います。\nR言語の実行環境は各自のコンピュータ上に構築していただくことが望ましいですが、 当日の研修ではbinderを利用します。binderはウェブブラウザ上で実行可能なRの環境を提供します。以下のボタンをクリックまたはURLから直接リンクいただくことでbinderが起動します。 そのまましばらく待つとRStudio (Server)の画面に切り替わるので、そこからRを操作します。\nこの研修では、R言語についての詳しい解説をしませんが、代わりに参考資料を掲載します。Rの操作で不明な点に遭遇した、詳しくRを知りたい場合に適宜参考にしてください。\n\n\n\n\n瓜生真也 - 徳島大学デザイン型AI教育研究センター・助教\n\n\n\n\nこの資料はクリエイティブ・コモンズ 表示 - 非営利 - 継承 4.0 国際 (CC BY-NC-SA 4.0) ライセンスの下に提供しています。ただし、資料中のコード部分はMITライセンスの下に提供します。\n本資料では次のオープンデータを利用します。\n\nSSDSE-県別推移 https://www.nstac.go.jp/use/literacy/ssdse/ 独立行政法人統計センター\n緊急避難場所 (徳島県) https://opendata.pref.tokushima.lg.jp/dataset/487.html 徳島県オープンデータポータルサイト - クリエイティブ・コモンズ 表示 4.0 国際\n\n資料の中で利用するにはそれぞれライセンスが付与されています。 利用の際は別途ライセンスを確認してください。"
  },
  {
    "objectID": "index.html#参考資料",
    "href": "index.html#参考資料",
    "title": "高等学校情報科におけるR言語の活用",
    "section": "参考資料",
    "text": "参考資料\n\n馬場真哉 (2019). 「R言語ではじめるプログラミングとデータ分析」ソシム ISBN: 978-4-8026-1238-8\n松村優哉、湯谷啓明、紀ノ定保礼、前田和寛 (2021). 「RユーザのためのRStudio[実践]入門」技術評論社 ISBN: 978-4-297-12170-9\nHadley Wickham、Garrett Grolemund 著、黒川利明 訳、大橋真也 技術監修 (2017). 「Rではじめるデータサイエンス（R for Data Science）」オライリー・ジャパン ISBN: 978-4-87311-814-7 https://r4ds.had.co.nz\n石田基広 (2012). 「Rで学ぶデータ・プログラミング入門: RStudioを活用する」共立出版 ISBN: 978-4-320-11029-8\nJaehyun Song、Yuki Yanai. 「私たちのR: ベストプラクティスの探究 」 https://www.jaysong.net/RBook/\nR言語入門"
  },
  {
    "objectID": "index.html#研修の日程",
    "href": "index.html#研修の日程",
    "title": "高等学校情報科におけるR言語の活用",
    "section": "研修の日程",
    "text": "研修の日程\n2022-12-08@online"
  },
  {
    "objectID": "index.html#内容に関する質問指摘",
    "href": "index.html#内容に関する質問指摘",
    "title": "高等学校情報科におけるR言語の活用",
    "section": "内容に関する質問、指摘",
    "text": "内容に関する質問、指摘\n改善のためにコメント等をいただけると幸いです。 コメントはGitHub issuesから投稿をお願いします。"
  },
  {
    "objectID": "mapping.html",
    "href": "mapping.html",
    "title": "地図へのマッピング",
    "section": "",
    "text": "library(sf) # 地理空間データの操作\nlibrary(mapview) # 地図のインタラクティブな操作\nlibrary(ggplot2) # データ可視化\n\nオープンデータの活用の中で取り上げた「緊急避難場所 (徳島県)」を再び利用します。 このデータは県内の市町村が指定する洪水災害発生時に利用可能な施設に関しての位置情報を記録したものでした。 このデータに含まれる位置情報（緯度、経度）をもとに、Rで地図を作成してみます。\nst_as_sf()関数を使って、データフレーム中の緯度 latitudeと経度 longitudeの列の値をもとに地理空間情報データ（ポイント）に変換します。\n\n# 緯度経度の座標からポイントデータを生成\nsf_hinanjyo <- \n  st_as_sf(df_hinanjyo,\n           coords = c(\"longitude\", \"latitude\"),\n           crs = 4326)\n\n避難場所の位置を地図上で確認します。\nmapviewパッケージはインタラクティブに操作できる地図機能を提供します。\n\nmapview(sf_hinanjyo)\n\n\n\n\n\n# 市町村別の塗り分け\n# mapview(sf_hinanjyo, zcol = \"city\")\n\n静的な地図はggplot2パッケージのgeom_sf()関数により生成可能です。\n\nggplot() +\n  geom_sf(data = sf_hinanjyo,\n          aes(color = city),\n          show.legend = FALSE)+\n  coord_sf()"
  }
]