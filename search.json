[
  {
    "objectID": "report.html",
    "href": "report.html",
    "title": "レポート作成",
    "section": "",
    "text": "これまでの研修内容で扱ってきた「グラフ」や「データ」、「地図」などは、「情報」として他者に伝える必要に迫られることがあります。 この研修の最後では、こうした情報伝達の方法の一つとして、レポート作成に焦点を当てます。 レポート作成はデータの集計、分析、可視化、地図表現といった作業内容を伝える手段として広く用いられる技能です。 そこには自身が行った作業内容のほかに文章や表・画像が入ります。\nこのレポートもRを通して作成できます。 このことは、プログラミング言語による制御が可能ということを意味します。 この研修で扱ってきたことをおさらいしながらレポート作成に取りかかりましょう。"
  },
  {
    "objectID": "report.html#quarto",
    "href": "report.html#quarto",
    "title": "レポート作成",
    "section": "1. Quarto",
    "text": "1. Quarto\nQuartoはオープンソースで開発される文書生成システムの一種です。 Pandocを利用することで、文書中にRやPython、Juliaなどのプログラミング言語の実行結果を含めたり、word、HTML、PDFなどの多様な文書の出力形式をサポートしています。 （この研修資料もまたQuartoで作成されています！）\nQuartoの導入には、Quarto本体のインストールが必要ですが、研修の実行環境であるRStudioでは、Quartoによる文書生成の機能が提供され、すぐに試せる状態です。 RStudioのメニューから、File、New Fileの順に進み、Quarto Document...を選択、文書のタイトルや出力形式を選択する画面を立ち上げます。 これらの設定は後で変更が可能できます。 値を入力したらCreateボタンをクリックします。 するとRStudioの一部にQuartoのためのファイルが作成されます（この時点では保存はされていません）。\n Quartoの基本は次の3要素に分かれます。\n\n文書の設定を行うYAMLフロントマター\n文章… HTMLやmarkdown、LaTexによる文字の装飾が可能\nコードブロック… RやPythonなどのコードを記述。実行結果を出力する文書に含められる\n\n\n\n\nqmdファイルの構成要素\n\n\nそれではRStudioからQuartoファイルを作成してみましょう。\n\nQuartoによるレポート作成\nファイルを作成したら、任意の文章やコードを記述してレポートを作っていきます。 ですがまずはQuartoの生成物を表示するところから始めましょう。 qmdファイルを新規作成した状態ですでにコードと文章が含まれた状態だと思います。 そのまま、画面上部にあるRenderボタンをクリックしましょう。 するとQuartoが記述されたRコードの実行と指定された出力形式（format: html）でのファイル作成を行います。"
  },
  {
    "objectID": "report.html#まとめ",
    "href": "report.html#まとめ",
    "title": "レポート作成",
    "section": "2. まとめ",
    "text": "2. まとめ\n\n\n\n\n\n\n演習\n\n\n\n\nこの研修で学んだ内容を、.qmdファイルにコードとともに整理してみましょう\nHTMLの出力の他、word (format: docx)などの出力結果を見てみましょう"
  },
  {
    "objectID": "report.html#参考資料",
    "href": "report.html#参考資料",
    "title": "レポート作成",
    "section": "3. 参考資料",
    "text": "3. 参考資料\n\nQuartoを使ってみませんか"
  },
  {
    "objectID": "plot.html",
    "href": "plot.html",
    "title": "グラフの作成",
    "section": "",
    "text": "数値や表形式でのデータ表現は、データの内容を示すのに使うことができます。 一方でデータの量が多い場合やデータ間の比較が困難な場合があります。 グラフによるデータの表現は、データの傾向や特徴を視覚的に示すのに適しています。\nここでは、独立行政法人統計センターが公開する教育用標準データセットから、身近な統計データをグラフ上に可視化する例を示します。"
  },
  {
    "objectID": "plot.html#データの用意",
    "href": "plot.html#データの用意",
    "title": "グラフの作成",
    "section": "1. データの用意",
    "text": "1. データの用意\n教育用標準データセットは、データサイエンス演習、統計教育などに活用されることを期待したデータとして独立行政法人統計センターが公開しているものです。 データにはいくつかの種類があり、都道府県・市区町村別の集計値、時系列別での値などがあります。\nここではSSDSE-県別推移（SSDSE-B）のデータを利用します。 このデータは総務省統計局がとりまとめた「統計でみる都道府県・市区町村のすがた(社会・人口統計体系)」の結果を 都道府県・時系列毎に整理したものです。\nこのうち、四国４県（徳島県、香川県、愛媛県、高知県）の項目を抜き出したデータを研修用に用意しています1。 次のコマンドを実行するとデータが読み込まれます。\n\n# 教育用標準データセット 県別推移 から四国４県のデータを取り出したものを読み込む\ndf_ssdse_b_tiny_shikoku <-\n  readr::read_rds(here::here(\"data-raw/ssdse_b_tiny_shikoku.rds\"))\n\n都道府県・年度別に人口・世帯、自然環境、教育、家計の4つの項目についてのデータを格納しています。\n\ndplyr::glimpse(df_ssdse_b_tiny_shikoku)\n\nRows: 48\nColumns: 17\n$ 年度                         <chr> \"2019\", \"2018\", \"2017\", \"2016\", \"2015\", \"…\n$ 都道府県                     <chr> \"徳島県\", \"徳島県\", \"徳島県\", \"徳島県\", \"…\n$ 総人口                       <dbl> 728000, 736000, 743000, 750000, 755733, 7…\n$ `総人口（男）`               <dbl> 347000, 351000, 354000, 357000, 359790, 3…\n$ `総人口（女）`               <dbl> 381000, 385000, 389000, 393000, 395943, 4…\n$ 出生数                       <dbl> 4554, 4998, 5182, 5346, 5586, 5502, 5666,…\n$ 死亡数                       <dbl> 10126, 10011, 10207, 9855, 9847, 9853, 10…\n$ 年平均気温                   <dbl> 17.4, 17.1, 16.7, 17.6, 17.0, 16.4, 16.8,…\n$ `降水量（年間）`             <dbl> 1543.0, 1760.0, 1496.0, 1715.0, 1985.5, 2…\n$ 幼稚園数                     <dbl> 122, 131, 143, 150, 161, 182, 189, 209, 2…\n$ 小学校数                     <dbl> 191, 192, 199, 207, 209, 222, 226, 253, 2…\n$ 中学校数                     <dbl> 89, 89, 90, 91, 92, 93, 94, 96, 96, 97, 9…\n$ 高等学校数                   <dbl> 37, 39, 38, 38, 38, 38, 39, 39, 42, 42, 4…\n$ 短期大学数                   <dbl> 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2,…\n$ 大学数                       <dbl> 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,…\n$ `消費支出（二人以上の世帯）` <dbl> 278855, 282732, 273835, 295192, 277856, 3…\n$ `教育費（二人以上の世帯）`   <dbl> 10024, 9706, 12652, 11736, 9903, 14504, 1…\n\n\nこのデータの特徴や関係を理解するために、データをグラフに表現してみましょう。 四国４県の時系列の変化だけでなく、2019年度に限定したデータについても別途用意し、４県の比較をしてみましょう。\n\n# 2019年のデータに絞り込む\ndf_ssdse_b_tiny_shikoku2019 <- \n  dplyr::filter(df_ssdse_b_tiny_shikoku,\n                年度 == \"2019\")\n\ndf_ssdse_b_tiny_shikoku2019\n\n# A tibble: 4 × 17\n  年度  都道府県  総人口 総人口…¹ 総人口…² 出生数 死亡数 年平…³ 降水量…⁴ 幼稚…⁵\n  <chr> <chr>      <dbl>    <dbl>    <dbl>  <dbl>  <dbl>  <dbl>    <dbl>  <dbl>\n1 2019  徳島県    728000   347000   381000   4554  10126   17.4    1543     122\n2 2019  香川県    956000   464000   492000   6631  12148   17.3     928.    128\n3 2019  愛媛県   1339000   634000   705000   8446  18281   17.4    1144.    138\n4 2019  高知県    698000   329000   369000   4270  10317   17.8    2538.     39\n# … with 7 more variables: 小学校数 <dbl>, 中学校数 <dbl>, 高等学校数 <dbl>,\n#   短期大学数 <dbl>, 大学数 <dbl>, `消費支出（二人以上の世帯）` <dbl>,\n#   `教育費（二人以上の世帯）` <dbl>, and abbreviated variable names\n#   ¹​`総人口（男）`, ²​`総人口（女）`, ³​年平均気温, ⁴​`降水量（年間）`, ⁵​幼稚園数"
  },
  {
    "objectID": "plot.html#グラフ表現",
    "href": "plot.html#グラフ表現",
    "title": "グラフの作成",
    "section": "2. グラフ表現",
    "text": "2. グラフ表現\nグラフの表現方法は次に示す通り様々な種類があります。 またこのほかにも多様なグラフが存在します。\n\n折れ線グラフ\n棒グラフ\n円グラフ\n散布図\n箱ひげ図\nヒストグラム\n\nRには標準機能としてグラフ作成のための関数が利用でき、これらのグラフも作成可能です。 例えば、棒グラフの作成を指示する関数はbarplot()、円グラフの作成にはpie()関数を使います。 これらの関数を用いて四国４県の2019年度の総人口をグラフに描画します。まずは棒グラフです。\n\nbarplot(\n  # 棒グラフに描画する値を指定\n  df_ssdse_b_tiny_shikoku2019$総人口,\n  # 棒グラフの項目名\n  names.arg = df_ssdse_b_tiny_shikoku2019$都道府県,\n  # 塗り分けの指定\n  col = palette.colors(n = 4),\n  # グラフのタイトル\n  main = \"2019年度 四国４県の総人口\",\n  sub = \"元データ: 独立行政法人統計センター 教育用標準データセット SSDSE-B\")\n\n\n\n\n図 1: 2019年度 四国４県の総人口を棒グラフで表現\n\n\n\n\nつづいて円グラフです。\n\npie(\n  # 棒グラフに描画する値を指定\n  df_ssdse_b_tiny_shikoku2019$総人口,\n  # 円グラフの項目名\n  labels = df_ssdse_b_tiny_shikoku2019$都道府県,\n  clockwise = TRUE,\n  col = palette.colors(n = 4),\n  main = \"2019年度 四国４県の総人口の割合\",\n  sub = \"元データ: 独立行政法人統計センター 教育用標準データセット SSDSE-B\")\n\n\n\n\n図 2: 2019年度 四国４県の総人口を円グラフので表現\n\n\n\n\nしかし、標準の関数ではグラフの種類ごとに用いる関数の利用方法に統一性がない問題があります。 barplot()関数とpie()関数では、項目名を示すのにそれぞれnames.arg、labels引数を指定することになります。 これに対して、ggplot2と呼ばれるパッケージを用いることで統一的なグラフの作成が可能となります。 次からはggplot2を用いたグラフ作成の処理を見ていきましょう。\n\nggplot2を用いたグラフ作成\nggplot2の利用にはパッケージをインストール・読み込む必要があります。 研修環境(binder)では事前にパッケージをインストール済みですが、自身の環境でggplot2を利用するには次のコマンドでパッケージのインストールを行っておきましょう。\n\ninstall.packages(\"ggplot2\")\n\nパッケージを利用可能にするには以下のコマンドを実行します。\n\nlibrary(ggplot2)\n\nggplot2を使ったグラフ作成の基本は次の3要素からなります。\n\nデータ… グラフに描画するデータ\n審美的要素…グラフ中の（審美的）要素とデータの紐付け\nレイヤ… グラフの種類、表現方法\n\n具体的にはggplot()関数とaes()関数、geom_*()関数を組み合わせて（+演算子を用います）グラフを作成します。 ggplot2の利点は統一性があるだけでなく、拡張性に優れていることも挙げられます。 ここでは紹介しませんが、グラフの細かいところまで調整できることができます。\n\n# ggplot2によるグラフ作成の基本\nggplot(\n  # データの指定\n  data = data,\n  # 審美的要素の指定\n  aes(\n    # x軸に割り当てる値\n    x = x, \n    # y軸に割り当てる値\n    y = y,\n    # 塗り分けに用いる値\n    color = z)) +\n  # グラフの種類 ... geom_bar()、geom_line()関数など\n  geom_()\n\nggplot2による、さまざまな種類のグラフ表現を示します。 geom_*()関数によるグラフの種類が変わっても、コードの書き方に大きな違いがない点が分かるかと思います。\n\n折れ線グラフ\n\nggplot(data = df_ssdse_b_tiny_shikoku,\n       aes(x = 年度, \n           y = 出生数, \n           color = 都道府県,\n           group = 都道府県)) +\n  geom_line() +\n  labs(title = \"四国４県の出生数の推移(2008年から2019年）\",\n       subtitle = \"元データ: 独立行政法人統計センター 教育用標準データセット SSDSE-B\")\n\n\n\n\n四国４県の出生数の推移\n\n\n\n\n\n\n棒グラフ\n\nggplot(data = df_ssdse_b_tiny_shikoku2019,\n       aes(x = 都道府県, \n           y = 総人口,\n           fill = 都道府県)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"2019年度 四国４県の総人口\",\n       subtitle = \"元データ: 独立行政法人統計センター 教育用標準データセット SSDSE-B\")\n\n\n\n\n四国４県の総人口\n\n\n\n\n\n\n積み上げ棒グラフ\n\ndf_ssdse_b_tiny_shikoku2019 |> \n  dplyr::select(`都道府県`, \n         `幼稚園数`, `小学校数`, `中学校数`, \n         `高等学校数`, `短期大学数`, `大学数`) |> \n  tidyr::pivot_longer(cols = c(`幼稚園数`, `小学校数`, `中学校数`, \n                               `高等学校数`, `短期大学数`, `大学数`),\n                      names_to = \"stage\",\n                      values_to = \"value\") |> \n  dplyr::mutate(stage = stringr::str_remove(stage, \"数$\")) |> \n  dplyr::mutate(stage = forcats::fct_rev(\n    forcats::fct_relevel(stage,\n                         \"幼稚園\", \"小学校\", \"中学校\", \"高等学校\", \"短期大学\", \"大学\"))) |> \n  ggplot(aes(都道府県, value, \n             group = stage, fill = stage)) +\n  geom_bar(stat = \"identity\", \n           position = \"stack\") +\n  labs(title = \"2019年度 四国４県の種類別学校数\",\n       subtitle = \"元データ: 独立行政法人統計センター 教育用標準データセット SSDSE-B\")\n\n\n\n\n四国４県の種類別学校数\n\n\n\n\n\n\n散布図\n\nggplot(df_ssdse_b_tiny_shikoku) +\n  aes(`教育費（二人以上の世帯）`, \n      `消費支出（二人以上の世帯）`) +\n  geom_point(aes(color = 都道府県)) +\n  labs(title = \"四国４県における教育費と消費支出の関係\",\n       subtitle = \"元データ: 独立行政法人統計センター 教育用標準データセット SSDSE-B\")\n\n\n\n\n四国４県における教育費と消費支出の関係\n\n\n\n\n\n\n箱ひげ図\n\nggplot(df_ssdse_b_tiny_shikoku) +\n  aes(都道府県, `消費支出（二人以上の世帯）`) +\n  geom_boxplot() +\n  labs(title = \"四国４県における消費支出（二人以上の世帯）の箱ひげ図\",\n       subtitle = \"元データ: 独立行政法人統計センター 教育用標準データセット SSDSE-B\")\n\n\n\n\n四国４県における消費支出（二人以上の世帯）の箱ひげ図"
  },
  {
    "objectID": "plot.html#まとめ",
    "href": "plot.html#まとめ",
    "title": "グラフの作成",
    "section": "3. まとめ",
    "text": "3. まとめ\n\n\n\n\n\n\n演習\n\n\n\n四国４県の統計データ（df_ssdse_b_tiny_shikokuまたはdf_ssdse_b_tiny_shikoku2019）から、興味のある項目についてグラフで表現してみましょう。"
  },
  {
    "objectID": "plot.html#参考資料",
    "href": "plot.html#参考資料",
    "title": "グラフの作成",
    "section": "4. 参考資料",
    "text": "4. 参考資料\n\nRによるデータ可視化と地図表現"
  },
  {
    "objectID": "shelter.html",
    "href": "shelter.html",
    "title": "オープンデータの活用",
    "section": "",
    "text": "オープンデータの取得から操作、可視化まで。\n徳島県オープンデータポータルサイトから緊急避難場所 (徳島県)のデータをRで読み込み、処理します。 リンク先にはいくつかのデータがあります。ここでは「洪水_登録データ一覧_2022年10月26日.csv (CSV 121KB)」を例に解説を行います。"
  },
  {
    "objectID": "shelter.html#パッケージの読み込み",
    "href": "shelter.html#パッケージの読み込み",
    "title": "オープンデータの活用",
    "section": "1. パッケージの読み込み",
    "text": "1. パッケージの読み込み\nRではパッケージと呼ばれる機能拡張をユーザーが自由に導入することが可能です。 パッケージの導入により、Rで実現可能な枠が広がります。 Rのインストール時に利用可能な、組み込みパッケージがありますが、これに加えていくつかのパッケージを導入しておくと、Rでの作業が快適になります。\nパッケージの読み込みはlibrary({パッケージ名})の形式で行います。 次のコードではいくつかのパッケージを読み込んでいます。 各パッケージがどのような機能をもつか、コメントとして示しました。 Rでは# 以降の文章はコメントとして扱われます。 コメントは、後からコードを見返した際、どのような処理をなぜ行ったのかを理解するのに役立つため、必要に応じて書いておくことが望ましいです。\n\nlibrary(readr) # 表形式データの読み込み\nlibrary(dplyr) # データ操作\nlibrary(ggplot2) # データ可視化\nlibrary(here) # ファイルの指定を容易にする"
  },
  {
    "objectID": "shelter.html#データの読み込み",
    "href": "shelter.html#データの読み込み",
    "title": "オープンデータの活用",
    "section": "2. データの読み込み",
    "text": "2. データの読み込み\nデータをRへ読み込むには、次に示す通り、いくつかの方法があります。\n\n対象ファイルを利用しているコンピュータのローカルディスクへ保存し、ファイルが置かれた場所（パス）を指定する\nインターネット上に置かれたファイルのURLを指定する\nRStudioのImport Dataset機能\n\nここでは、すでにデータが手元にあることを想定し、1の方法でデータを読み込みます。read_csv()関数のfile引数にデータが保存されているパスを指定しましょう。 パスの値をfile = \"パス\"の形式で記述します。パスを引用符 \" で囲む必要がある点に注意してください。 Rでは文字列を引用符で囲むルールが存在します。 また、locale引数にもファイル読み込みのためのオプションを指定し、コードを実行します。\n\nread_csv(here(\"data-raw/tksm_shelter_for_flood.csv\"),\n    # 読み込みのオプション\n    # 日本語が使われる一部のファイルを読み込むと、文字化けをすることがあります。\n    # このファイルでも日本語が使われているため、次のオプションの指定で文字化けを回避します。\n         locale = locale(encoding = \"SHIFT-JIS\"))\n\nRows: 701 Columns: 19\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (6): タイトル, 所在地, 連絡先, 分類, 災害種別, 備考\ndbl  (2): 緯度, 経度\nlgl (11): 市町村, 写真1, 写真2, 写真3, 写真4, 写真5, 写真6, 写真7, 写真8, 写真9, 写真10...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 701 × 19\n   市町村 タイトル  所在地  緯度  経度 写真1 写真2 写真3 写真4 写真5 写真6 写真7\n   <lgl>  <chr>     <chr>  <dbl> <dbl> <lgl> <lgl> <lgl> <lgl> <lgl> <lgl> <lgl>\n 1 NA     板野町防… 徳島…   34.1  134. NA    NA    NA    NA    NA    NA    NA   \n 2 NA     新野小学… 阿南…   33.8  135. NA    NA    NA    NA    NA    NA    NA   \n 3 NA     新野東小… 阿南…   33.8  135. NA    NA    NA    NA    NA    NA    NA   \n 4 NA     阿南第二… 阿南…   33.9  135. NA    NA    NA    NA    NA    NA    NA   \n 5 NA     桑野小学… 阿南…   33.9  135. NA    NA    NA    NA    NA    NA    NA   \n 6 NA     山口小学… 阿南…   33.9  135. NA    NA    NA    NA    NA    NA    NA   \n 7 NA     桑野公民… 阿南…   33.9  135. NA    NA    NA    NA    NA    NA    NA   \n 8 NA     大井小学… 阿南…   33.9  135. NA    NA    NA    NA    NA    NA    NA   \n 9 NA     加茂谷中… 阿南…   33.9  135. NA    NA    NA    NA    NA    NA    NA   \n10 NA     阿南市ク… 阿南…   33.9  135. NA    NA    NA    NA    NA    NA    NA   \n# … with 691 more rows, and 7 more variables: 写真8 <lgl>, 写真9 <lgl>,\n#   写真10 <lgl>, 連絡先 <chr>, 分類 <chr>, 災害種別 <chr>, 備考 <chr>\n\n\nRでは処理の結果を再利用するために、オブジェクトを利用します。 読み込んだデータに対して、処理を加えるためにオブジェクトとして保存しましょう。 オブジェクトへの保存は「代入」とも呼ばれます。 代入は <- （代入演算子）の左側に保存先のオブジェクト名、右側に保存したい処理内容を記述して実行します。\n\n# 読み込んだcsvの内容を df_hinanjyo として記録する\ndf_hinanjyo <- \n  read_csv(here(\"data-raw/tksm_shelter_for_flood.csv\"),\n         locale = locale(encoding = \"SHIFT-JIS\"))\n\nRows: 701 Columns: 19\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (6): タイトル, 所在地, 連絡先, 分類, 災害種別, 備考\ndbl  (2): 緯度, 経度\nlgl (11): 市町村, 写真1, 写真2, 写真3, 写真4, 写真5, 写真6, 写真7, 写真8, 写真9, 写真10...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nオブジェクトに保存した内容（値）はいつでも呼び出すことができます。\n\n# コンソールでオブジェクト名を実行すると値が呼び出される\ndf_hinanjyo\n\n読み込んだファイルのように、表形式で表現されるデータのことをRではデータフレームと呼びます。 データフレームは表計算ソフトのように1行1列それぞれに値が格納されています。\n\n\n\n洪水_登録データ一覧を表計算ソフトで表示した画面。Rでの読み込み結果が正しく行われていることを確認しましょう。\n\n\n上記のようにオブジェクト名をコンソールで実行してデータフレームを表示することもできますが、 データフレームの中身を確認する関数はいくつかあります。\n\nView(df_hinanjyo)\n\n\n# データ中の各変数の値を縦方向に出力します\nglimpse(df_hinanjyo)\n\nRows: 701\nColumns: 19\n$ 市町村   <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ タイトル <chr> \"板野町防災ステーション\", \"新野小学校\", \"新野東小学校\", \"阿南…\n$ 所在地   <chr> \"徳島県板野郡板野町川端字新手崎18-1\", \"阿南市新野町南宮ノ久保…\n$ 緯度     <dbl> 34.13761, 33.84699, 33.84517, 33.87679, 33.87358, 33.87303, 3…\n$ 経度     <dbl> 134.4729, 134.5811, 134.6042, 134.6283, 134.6118, 134.5819, 1…\n$ 写真1    <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ 写真2    <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ 写真3    <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ 写真4    <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ 写真5    <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ 写真6    <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ 写真7    <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ 写真8    <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ 写真9    <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ 写真10   <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ 連絡先   <chr> \"088-637-5585\", \"0884-36-2021\", \"0884-36-2103\", \"0884-26-0203…\n$ 分類     <chr> \"指定緊急避難場所（法指定）\", \"指定緊急避難場所（法指定）\", \"…\n$ 災害種別 <chr> \"洪水,崖崩れ等,地震,大規模な火事,内水氾濫\", \"洪水,崖崩れ等,地…\n$ 備考     <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n\n\n\n\n\n\n\n\nノート\n\n\n\nインターネットが利用できない環境では、URLを指定したデータの読み込みが行えません。 ローカルディスクにファイルをダウンロードしておくことで、インターネット非接続状態でもファイルの読み込みが可能になります。 次のコマンドを実行するとファイルのダウンロード、ローカルでのパスを指定したファイルの読み込みが行われます。\n\nfs::dir_create(here(\"data-raw\"))\n# インターネット上のファイルをダウンロードする（ここではインターネット接続が必要です）\ndownload.file(\"https://opendata.pref.tokushima.lg.jp/dataset/487/resource/6553/洪水_登録データ一覧_2022年10月26日_15時14分.csv\",\n              # data-rawフォルダの中に tksm_shelter_for_flood.csv として保存します\n              here(\"data-raw/tksm_shelter_for_flood.csv\"))\n\n# 保存したcsvファイルのパスをfile引数で指定します\ndf_hinanjyo <- \n  read_csv(\n    file = here(\"data-raw/tksm_shelter_for_flood.csv\"),\n           locale = locale(encoding = \"SHIFT-JIS\"))\n\n\n\n\nダウンロードしたファイルとフォルダの関係\n\n\n\n\n\n\n\n\n\n\nノート\n\n\n\n上記の処理はRStudioのFile import機能を使っても行えます。 この機能には、データの読み込み結果をプレビューできる、Rのコード入力を最低限に抑えることができるなどの利点があります。\n\n\n\nRStudioのImport dataset機能を使ったデータ読み込み"
  },
  {
    "objectID": "shelter.html#データの操作加工",
    "href": "shelter.html#データの操作加工",
    "title": "オープンデータの活用",
    "section": "3. データの操作・加工",
    "text": "3. データの操作・加工\nデータを読み込んだ後は自由自在にデータを操作したり加工を行うことができます。 以下に示すとおり、データ操作に便利な関数を提供するdplyrパッケージを使ってデータに変更を加えていきましょう。\n\nselect()… 列の選択\nfilter()… 行の絞り込み\nmutate(), transmute()… 値の編集\ngroup_by(), summarise() … グループごとに値を集計する\narrange()… 行の並び替え\ncount()… 項目の頻度を数える\n*_join() … データフレームの結合\n\nデータフレームを確認するとわかるように、このデータには複数の「写真」の列が存在します。 これらの列の中には値がありません。 値がない状態を「欠損」は呼ばれ、そのことを表現するために欠損値 (NA) が使われます。 こうした欠損値からなる列は不要と判断し、列を絞り込みましょう。 列の選択はselect()関数で行います。この関数の引数に、残したい、または削除したい変数を記述して実行します1。 関心のある列にデータを制限することで、データの見通しがよくなります。\n\ndf_hinanjyo <- \n  # 関心のある列を選び直す\n  select(df_hinanjyo,\n         `市町村`, `タイトル`, `所在地`, `緯度`, `経度`, `分類`)\nglimpse(df_hinanjyo)\n\nRows: 701\nColumns: 6\n$ 市町村   <lgl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ タイトル <chr> \"板野町防災ステーション\", \"新野小学校\", \"新野東小学校\", \"阿南…\n$ 所在地   <chr> \"徳島県板野郡板野町川端字新手崎18-1\", \"阿南市新野町南宮ノ久保…\n$ 緯度     <dbl> 34.13761, 33.84699, 33.84517, 33.87679, 33.87358, 33.87303, 3…\n$ 経度     <dbl> 134.4729, 134.5811, 134.6042, 134.6283, 134.6118, 134.5819, 1…\n$ 分類     <chr> \"指定緊急避難場所（法指定）\", \"指定緊急避難場所（法指定）\", \"…\n\n\n加えて、日本語の列名から英語での列名に変更します。\n\n# 緯度 ... latitude\n# 経度 ... longitude\ncolnames(df_hinanjyo) <- \n  c(\"city\", \"title\", \"address\", \"latitude\", \"longitude\", \"type\")\nhead(df_hinanjyo)\n\n# A tibble: 6 × 6\n  city  title                  address                     latit…¹ longi…² type \n  <lgl> <chr>                  <chr>                         <dbl>   <dbl> <chr>\n1 NA    板野町防災ステーション 徳島県板野郡板野町川端字新…    34.1    134. 指定…\n2 NA    新野小学校             阿南市新野町南宮ノ久保70-1     33.8    135. 指定…\n3 NA    新野東小学校           阿南市新野町是国37-2           33.8    135. 指定…\n4 NA    阿南第二中学校         阿南市内原町竹ノ内口143-1      33.9    135. 指定…\n5 NA    桑野小学校             阿南市桑野町岡元40-1           33.9    135. 指定…\n6 NA    山口小学校             阿南市山口町末広12-1           33.9    135. 指定…\n# … with abbreviated variable names ¹​latitude, ²​longitude\n\n\nここでcity列に注目します。 この列は避難所の位置する市町村を記録すべき列ですが、いずれの行にも値は含まれません。\n\n# cityの項目を数える --> NA (欠損値)\ncount(df_hinanjyo, city)\n\n# A tibble: 1 × 2\n  city      n\n  <lgl> <int>\n1 NA      701\n\n\n\n# 欠損値の行を確認\nfilter(df_hinanjyo, is.na(city))\n# 欠損値でない行を確認\nfilter(df_hinanjyo, !is.na(city))\n\nそこで避難所の住所を記録したaddress列の値から市町村名の部分だけを抜き出して、 city列を上書きすることを考えましょう。 addressには徳島県板野郡板野町川端字新手崎18-1のように住所が文字列として記録されています。\n\n# 1行目の住所を表示\ndf_hinanjyo$address[1]\n\n[1] \"徳島県板野郡板野町川端字新手崎18-1\"\n\n# すべての住所を表示\n# df_hinanjyo$address\n\n# 県名を含む住所から市町村の部分を取り出す\nstringr::str_extract(df_hinanjyo$address[1], \n                     pattern = \"(.{2}郡.{2,3}町|.{2,3}(市|町|村))\")\n\n[1] \"板野郡板野町\"\n\n\n\nstringr::str_remove(df_hinanjyo$address[1], \"徳島県\")\nstringr::str_extract(df_hinanjyo$address[1], \".{2}郡.{2,3}町\")\nx <- \n  which(is.na(stringr::str_extract(df_hinanjyo$address, \"(.{2}郡.{2,3}町|.{2,3}(市|町|村))\")))\ndf_hinanjyo$address[x]\n\nすべての行にこの処理を適用しましょう。 mutate()関数を使って、任意の処理を各行へ適用可能です。\n\ndf_hinanjyo <- \n  mutate(df_hinanjyo,\n         # 住所から市町村名の部分を取り出し、city列に格納する\n         city = stringr::str_extract(address, \"(.{2}郡.{2,3}町|.{2,3}(市|町|村))\"))\n\n結果を確認します。 先ほどcount()関数でcity列の項目を数えた際には欠損値だけでしたが、 今度は市町村別の避難場所のカウントが正しく行われているように見えます。\n\ndf_tokushima_hinanjyo_count <- \n  # sort = TRUE ... 市町村の項目が多い順（降順）に出力する\n  count(df_hinanjyo, city, sort = TRUE)\n\ndf_tokushima_hinanjyo_count\n\n# A tibble: 46 × 2\n   city         n\n   <chr>    <int>\n 1 三好市     190\n 2 <NA>        75\n 3 鳴門市      72\n 4 阿南市      52\n 5 板野町      35\n 6 勝浦町      34\n 7 松茂町      21\n 8 石井町      21\n 9 吉野川市    18\n10 美馬市      17\n# … with 36 more rows\n\n\nなお、この処理はgroup_by()関数とsummarise()関数を組み合わせても実行できます。group_by()は指定した列の項目ごとにグループを作成し、グループに対する操作を可能にします。 summarise()関数はそうしたグループへの集計を行う際に利用します。 例えば、クラスで行った教科ごとの平均点を求める際、教科をグループとしてその平均値を求める、といった処理がこの2つの関数を組み合わせることで可能となります。\n\n# 下記と同じ結果を得る\n# count(df_hinanjyo, city, sort = TRUE)\narrange(summarise(group_by(df_hinanjyo,\n                           city),\n                  n = n()),\n        desc(n))\n\nグループ化した項目を数えるのにn()関数を使います。 このようなグループごとの項目の集計は頻繁に行う処理のため、ショートカットとしてcount()関数が用意されています。\n\n# いくつかの行は欠損値のまま\nfilter(df_tokushima_hinanjyo_count, is.na(city))\n\n# A tibble: 1 × 2\n  city      n\n  <chr> <int>\n1 <NA>     75\n\n\n市町村別の避難場所の集計結果を見ると、三好市が最も数が多いことがわかります。 しかしこの値は人口や面積を考慮した値ではありません。 人口や面積の単位あたりの避難場所の数を比較することで、市町村別の評価が可能となります。\nグラフの作成で利用した教育用標準データセットの中には、市区町村別の統計データを記録したものもあります。 データはすでにダウンロードされ、徳島県の市町村に関する情報が参照できる状態となっています。 次のコマンドを実行し、データをRに読み込みましょう。\n\ndf_ssdse_a_tiny_tokushima <- \n  read_rds(here(\"data-raw/ssdse_a_tiny_tokushima.rds\"))\n\ndf_ssdse_a_tiny_tokushima\n\n# A tibble: 24 × 4\n   市区町村 `人口・世帯数_総人口` `総面積（北方地域及び竹島を除く）` 可住地面積\n   <chr>                    <dbl>                              <dbl>      <dbl>\n 1 徳島市                  252391                              19139      14096\n 2 鳴門市                   54622                              13566       6466\n 3 小松島市                 36149                               4537       3882\n 4 阿南市                   69470                              27925      12892\n 5 吉野川市                 38772                              14414       6128\n 6 阿波市                   34713                              19111       9003\n 7 美馬市                   28055                              36714       7504\n 8 三好市                   23605                              72142       8915\n 9 勝浦町                    4837                               6983       2264\n10 上勝町                    1380                              10963       1264\n# … with 14 more rows\n\n\ndplyrパッケージではデータフレームを結合する関数*_join()を提供します。 関数の引数に対象となる2つのデータフレームを指定し、結合の際のキーとなる変数を引数byに与えて実行します。\n\ndf_tokushima_hinanjyo_count <- \n  inner_join(\n  df_tokushima_hinanjyo_count,\n  df_ssdse_a_tiny_tokushima,\n  by = c(\"city\" = \"市区町村\"))\n\ndf_tokushima_hinanjyo_count\n\n# A tibble: 16 × 5\n   city         n `人口・世帯数_総人口` 総面積（北方地域及び竹島を除く…¹ 可住…²\n   <chr>    <int>                 <dbl>                            <dbl>  <dbl>\n 1 三好市     190                 23605                            72142   8915\n 2 鳴門市      72                 54622                            13566   6466\n 3 阿南市      52                 69470                            27925  12892\n 4 板野町      35                 13042                             3622   1964\n 5 勝浦町      34                  4837                             6983   2264\n 6 松茂町      21                 14583                             1424   1418\n 7 石井町      21                 24833                             2885   2648\n 8 吉野川市    18                 38772                            14414   6128\n 9 美馬市      17                 28055                            36714   7504\n10 阿波市      17                 34713                            19111   9003\n11 北島町      15                 22745                              874    874\n12 美波町      15                  6222                            14074   1541\n13 上板町      11                 11384                             3458   2243\n14 神山町       9                  4647                            17330   2419\n15 藍住町       8                 35246                             1627   1627\n16 上勝町       5                  1380                            10963   1264\n# … with abbreviated variable names ¹​`総面積（北方地域及び竹島を除く）`,\n#   ²​可住地面積\n\n\ncityとnの2列からなるデータフレームdf_tokushima_hinanjyo_countに、df_ssdse_a_tiny_tokushimaがもつ列の情報が加わったことがわかります。\n追加された情報から、避難場所の数を単位当たり数を求めてみます。\n\n# 災害種別_洪水\ndf_tokushima_hinanjyo_count <- \n  transmute(df_tokushima_hinanjyo_count,\n          `市町村` = city,\n          `避難場所件数` = n,\n          `避難場所件数(人口1万人あたり)` = (n / `人口・世帯数_総人口`) * 10000)\n\ndf_tokushima_hinanjyo_count <-\n  # 人口1万人当たりの避難場所件数の順に並び替え\n  arrange(df_tokushima_hinanjyo_count,\n          desc(`避難場所件数(人口1万人あたり)`))\n\n人口1万人あたりで見ても、三好市の避難場所件数が最も多いことに変わりはありませんでしたが、 勝浦川の流域に位置する勝浦町、上勝町が上位になりました。"
  },
  {
    "objectID": "shelter.html#グラフの作成",
    "href": "shelter.html#グラフの作成",
    "title": "オープンデータの活用",
    "section": "4. グラフの作成",
    "text": "4. グラフの作成\n続いて、市町村別に避難場所の数を集計したデータ df_tokushima_hinanjyo_count をもとに、簡単なグラフを作成してみましょう。\n避難場所の数（数量）を市町村で比較する際、適したグラフの種類は何でしょうか。 ここでは棒グラフと円グラフによるグラフ作成の例を示します。\n\np <- \n  ggplot(data = df_tokushima_hinanjyo_count,\n       aes(市町村, 避難場所件数)) +\n  # 棒グラフの指定\n  geom_bar(\n    stat = \"identity\", # n （市町村別の避難場所の数）が棒の高さに用いられる\n    fill = \"#3F54B4\" # 棒の塗りつぶしの色\n  )\n\np\n\n\n\n\n徳島県内緊急避難場所（災害種別 洪水）の市町村別件数\n\n\n\n\ngeom_bar()関数を指定して棒グラフを描画しましたが、このグラフはいくつかの理由で情報を適切に伝えられていません。 例えば、\n\nx軸の市町村の間隔が狭いために文字が潰れてしまっている\nx軸の市町村の並びと避難場所の件数に関係がなく、関係を読み取りにくい\n\nこの問題を改善してみましょう。 まず、1の問題はx軸に複数の項目を並べる際に生じる問題です。 特に項目数が多い場合、横幅を広くとらないと文字が潰れてしまいます。 根本的な対策は、x軸とy軸を入れ替えて表示することです。 これにより、項目の間隔を気にする必要がなくなります（ただし高さを十分にする）。 すでに作成したグラフに対して、coord_flip()関数を適用するとx軸とy軸の入れ替えが行われます。\n\np +\n  coord_flip()\n\n\n\n\n徳島県内緊急避難場所（災害種別 洪水）の市町村別件数（市町村別の並びを縦に変更）\n\n\n\n\n続いて市町村名と避難場所の件数の関係をわかりやすく伝える工夫をしてみます。 現在の図は適当に市町村名が並んでいるように見えるため、避難場所の件数で入れ替えるようにします。 合わせてグラフ全体の見た目も調整しておきましょう。\n\np <- \n  ggplot(data = df_tokushima_hinanjyo_count,\n       aes(forcats::fct_reorder(市町村, 避難場所件数), 避難場所件数)) +\n  geom_bar(stat = \"identity\",\n           fill = \"#3F54B4\") +\n  coord_flip() +\n  xlab(NULL) +\n  ylab(\"避難場所の件数\") +\n  labs(title = \"徳島県内緊急避難場所（災害種別 洪水）の市町村別件数\")\n\np\n\n\n\n\n徳島県内緊急避難場所（災害種別 洪水）の市町村別件数"
  },
  {
    "objectID": "shelter.html#まとめ",
    "href": "shelter.html#まとめ",
    "title": "オープンデータの活用",
    "section": "5. まとめ",
    "text": "5. まとめ\n\n\n\n\n\n\n演習\n\n\n\n\n徳島県オープンデータポータルサイトから適当なデータを見つけ、ファイルをRに読み込みましょう。\n読み込んだデータをdplyrパッケージのデータ操作のための関数を使って処理してみましょう。\n\n\nselect()\nfilter()\nmutate(), transmute()\ngroup_by(), summarise()\narrange()\ncount()\n*_join()\n\nなどの関数が利用できます"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "高等学校情報科におけるR言語の活用",
    "section": "",
    "text": "このページは、令和4年度（2022年度）徳島県教科「情報」指導者研修のための資料です。 R言語によるプログラミングを通し、教科「情報」で扱われるいくつかの単元の内容を学びます。 具体的には、「プログラミング」、「データの可視化」、「オープンデータの活用」を扱います。 またQuartoを使ったレポート作成についても解説します。\n\n\n研修内容はこのウェブページ上またはスライドから閲覧可能です。 研修を通してR言語によるプログラミングを行います。\nR言語の実行環境は各自のコンピュータ上に構築していただくことが望ましいですが、 当日の研修ではbinderを利用します。binderはウェブブラウザ上で実行可能なRの環境を提供します。以下のボタンをクリックまたはURLから直接リンクいただくことでbinderが起動します。 そのまましばらく待つとRStudio (Server)の画面に切り替わるので、そこからRを操作します。\n\n\n\n\n\nhttps://mybinder.org/v2/gh/uribo/221208tskm_ed_training/main?urlpath=rstudio\n\n\n\nBinderの立ち上げ\n\n\nこの研修ではR言語についての詳しい解説をしませんが、代わりに参考資料を掲載します。Rの操作で不明な点に遭遇した、詳しくRを知りたい場合に適宜参考にしてください。\n\n\n\n\n瓜生真也 - 徳島大学デザイン型AI教育研究センター・助教\n\n\n\n\nこの資料はクリエイティブ・コモンズ 表示 - 非営利 - 継承 4.0 国際 (CC BY-NC-SA 4.0) ライセンスの下に提供しています。ただし、資料中のコード部分はMITライセンスの下に提供します。\n本資料では次のオープンデータを利用します。\n\nSSDSE-市区町村 https://www.nstac.go.jp/use/literacy/ssdse/ 独立行政法人統計センター\nSSDSE-県別推移 https://www.nstac.go.jp/use/literacy/ssdse/ 独立行政法人統計センター\n緊急避難場所 (徳島県) https://opendata.pref.tokushima.lg.jp/dataset/487.html 徳島県オープンデータポータルサイト - クリエイティブ・コモンズ 表示 4.0 国際\nNatural Earth https://www.naturalearthdata.com - パブリックドメイン"
  },
  {
    "objectID": "index.html#参考資料",
    "href": "index.html#参考資料",
    "title": "高等学校情報科におけるR言語の活用",
    "section": "参考資料",
    "text": "参考資料\n\n馬場真哉 (2019). 「R言語ではじめるプログラミングとデータ分析」ソシム ISBN: 978-4-8026-1238-8\n松村優哉、湯谷啓明、紀ノ定保礼、前田和寛 (2021). 「RユーザのためのRStudio[実践]入門」技術評論社 ISBN: 978-4-297-12170-9\nHadley Wickham、Garrett Grolemund 著、黒川利明 訳、大橋真也 技術監修 (2017). 「Rではじめるデータサイエンス（R for Data Science）」オライリー・ジャパン ISBN: 978-4-87311-814-7 https://r4ds.had.co.nz\n石田基広 (2012). 「Rで学ぶデータ・プログラミング入門: RStudioを活用する」共立出版 ISBN: 978-4-320-11029-8\nJaehyun Song、Yuki Yanai. 「私たちのR: ベストプラクティスの探究 」 https://www.jaysong.net/RBook/\nR言語入門"
  },
  {
    "objectID": "index.html#研修の日程",
    "href": "index.html#研修の日程",
    "title": "高等学校情報科におけるR言語の活用",
    "section": "研修の日程",
    "text": "研修の日程\n2022-12-08@online"
  },
  {
    "objectID": "index.html#内容に関する質問指摘",
    "href": "index.html#内容に関する質問指摘",
    "title": "高等学校情報科におけるR言語の活用",
    "section": "内容に関する質問、指摘",
    "text": "内容に関する質問、指摘\n改善のためにコメント等をいただけると幸いです。 コメントはGitHub issuesから投稿をお願いします。"
  },
  {
    "objectID": "mapping.html",
    "href": "mapping.html",
    "title": "地図へのマッピング",
    "section": "",
    "text": "多くの統計データには、都道府県名やメッシュ、緯度経度の座標といった地理的な空間情報を含みます。 このような地理空間情報をもつデータ（地理空間データ）は地図上に投影することで内容の理解を深めることが期待できます。 また、地理空間データの操作により分析の幅を広げることができます。 Rの地理空間データを使って、これらの処理を行いましょう。"
  },
  {
    "objectID": "mapping.html#パッケージの読み込み",
    "href": "mapping.html#パッケージの読み込み",
    "title": "地図へのマッピング",
    "section": "1. パッケージの読み込み",
    "text": "1. パッケージの読み込み\nここでもいくつかのパッケージを使います。 関数を利用するパッケージを次のコマンドで読み込みます。\n\nlibrary(dplyr) # データ操作\nlibrary(sf) # 地理空間データの操作\nlibrary(mapview) # 地図のインタラクティブな操作\nlibrary(ggplot2) # データ可視化\nlibrary(rnaturalearth) # パブリックドメインで利用可能な県単位のポリゴンデータ\nlibrary(rnaturalearthhires)"
  },
  {
    "objectID": "mapping.html#地理空間データの用意",
    "href": "mapping.html#地理空間データの用意",
    "title": "地図へのマッピング",
    "section": "2. 地理空間データの用意",
    "text": "2. 地理空間データの用意\nオープンデータの活用の中で取り上げた「緊急避難場所 (徳島県)」を再び利用します。 このデータは県内の市町村が指定する洪水災害発生時に利用可能な施設に関しての位置情報を記録したものでした。 このデータに含まれる位置情報（緯度、経度）をもとに、Rで地理空間データを作成してみます。\nsfパッケージのst_as_sf()関数を使って、データフレーム中の緯度 latitudeと経度 longitudeの列の値をもとに地理空間情報データ（ポイント）に変換します。\n\n# 緯度経度の座標からポイントデータを生成\nsf_hinanjyo <- \n  st_as_sf(df_hinanjyo,\n           coords = c(\"longitude\", \"latitude\"),\n           crs = 4326)\n\nglimpse(sf_hinanjyo)\n\nRows: 701\nColumns: 5\n$ city     <chr> \"板野郡板野町\", \"阿南市\", \"阿南市\", \"阿南市\", \"阿南市\", \"阿南…\n$ title    <chr> \"板野町防災ステーション\", \"新野小学校\", \"新野東小学校\", \"阿南…\n$ address  <chr> \"徳島県板野郡板野町川端字新手崎18-1\", \"阿南市新野町南宮ノ久保…\n$ type     <chr> \"指定緊急避難場所（法指定）\", \"指定緊急避難場所（法指定）\", \"…\n$ geometry <POINT [°]> POINT (134.4729 34.13761), POINT (134.5811 33.84699), P…\n\n\ngeometry列に各施設の位置がポイントデータとして記録されています。\n続いて、徳島県の形状を示すためのポリゴンデータを準備します。 ここではパブリックドメインで使用できるNatural EarthのデータをRから取得するrnaturalearthパッケージを用います。 次のコマンドで四国４県のポリゴンデータを用意します。\n\n# rnaturalearthから四国のポリゴンを準備する\nne_jpn_shikoku <- \n  rnaturalearth::ne_states(country = \"Japan\", returnclass = \"sf\") |> \n  filter(region == \"Shikoku\") |> \n  select(iso_3166_2, name)\n\nne_jpn_shikoku\n\n# A tibble: 4 × 3\n  iso_3166_2 name                                                       geometry\n  <chr>      <chr>                                            <MULTIPOLYGON [°]>\n1 JP-36      Tokushima (((134.4424 34.20827, 134.4686 34.20746, 134.4952 34.224…\n2 JP-37      Kagawa    (((133.5919 34.02381, 133.6209 34.04556, 133.634 34.0607…\n3 JP-38      Ehime     (((132.6399 32.90892, 132.6272 32.90632, 132.6184 32.906…\n4 JP-39      Kochi     (((134.2957 33.53032, 134.2732 33.508, 134.2446 33.46075…\n\n\nこのほか、行政区域のデータには国土数値情報ダウンロードサービスの行政区域データなどが利用できます。国土数値情報の行政区域データは市区町村別にポリゴンデータがあたえられているため、細かな地域の可視化や分析に役立ちます。"
  },
  {
    "objectID": "mapping.html#地図の作成",
    "href": "mapping.html#地図の作成",
    "title": "地図へのマッピング",
    "section": "3. 地図の作成",
    "text": "3. 地図の作成\nRでの地理空間データの可視化表現として、インタラクティブに操作できる地図、グラフの作成の中で扱ったggplot2による静的な図の作成ができます。\n\nインタラクティブな地図の操作\n避難場所の位置を地図上で確認します。\nmapviewパッケージはインタラクティブに操作できる地図機能を提供します。 mapview()関数に対象の地理空間データを与えて実行すると、自在に動かせる地図の画面が表示されます。 以下に出力される地図を操作（移動、拡大・縮小、レイヤの変更、アイコンのクリック）をしてみましょう。\n\nmapview(sf_hinanjyo)\n\n\n\n\n\n# 市町村別の塗り分け\n# mapview(sf_hinanjyo, zcol = \"city\")\n\n同様の出力として、避難所等の場所を地図上にマッピングするアプリケーションを徳島県が公開しています。関心のある方はRでの出力と県のページを比較してみてください。\n\n\n静的な地図の描画とレイヤの重ね合わせ\n静的な地図はggplot2パッケージのgeom_sf()関数により生成可能です。 これにより、徳島県の形状を表すポリゴンデータ、避難場所の位置を示すポイントデータの2つを重ね合わせた地図を作成できます。\n\nggplot() +\n  geom_sf(data = filter(ne_jpn_shikoku, name == \"Tokushima\")) +\n  geom_sf(data = sf_hinanjyo,\n          aes(color = city),\n          show.legend = FALSE) +\n  coord_sf() +\n  labs(title = \"徳島県緊急避難場所の位置\")\n\n\n\n\n徳島県緊急避難場所の位置"
  },
  {
    "objectID": "mapping.html#地理空間データの処理",
    "href": "mapping.html#地理空間データの処理",
    "title": "地図へのマッピング",
    "section": "4. 地理空間データの処理",
    "text": "4. 地理空間データの処理\n地理空間データの処理はsfパッケージを介して行います。 例えば、ポリゴンデータから面積を計算する、2地点（ポイント）間の距離を求める、などが可能です。\n\n# 面積の算出\nst_area(ne_jpn_shikoku)\n\nUnits: [m^2]\n[1] 4249555713 1853829862 5633714966 7091706264\n\n# 単位の変換\nunits::set_units(st_area(ne_jpn_shikoku), km^2)\n\nUnits: [km^2]\n[1] 4249.556 1853.830 5633.715 7091.706\n\n\n\n# 距離の計算\nst_distance(\n  sf_hinanjyo[1, ], # 板野町防災ステーション (徳島県板野郡板野町川端字新手崎18-1)\n  sf_hinanjyo[10, ] # 阿南市クリーンピュア (阿南市熊谷町定方44)\n)\n\nUnits: [m]\n         [,1]\n[1,] 26405.25\n\n\n\n# ポリゴンの重心点\nst_centroid(ne_jpn_shikoku)\n\nWarning in st_centroid.sf(ne_jpn_shikoku): st_centroid assumes attributes are\nconstant over geometries of x\n\n\n# A tibble: 4 × 3\n  iso_3166_2 name                 geometry\n  <chr>      <chr>             <POINT [°]>\n1 JP-36      Tokushima (134.2332 33.91233)\n2 JP-37      Kagawa    (134.0072 34.23647)\n3 JP-38      Ehime     (132.8498 33.61348)\n4 JP-39      Kochi     (133.3479 33.40644)\n\n\nsfパッケージで求めた値は、dplyrパッケージのmutate()関数と組み合わせることでデータフレームの列として格納できます。\n\nmutate(ne_jpn_shikoku,\n       area = units::set_units(st_area(ne_jpn_shikoku), km^2))\n\n# A tibble: 4 × 4\n  iso_3166_2 name                                                 geometry  area\n  <chr>      <chr>                                      <MULTIPOLYGON [°]> [km^…\n1 JP-36      Tokushima (((134.4424 34.20827, 134.4686 34.20746, 134.4952 … 4250.\n2 JP-37      Kagawa    (((133.5919 34.02381, 133.6209 34.04556, 133.634 3… 1854.\n3 JP-38      Ehime     (((132.6399 32.90892, 132.6272 32.90632, 132.6184 … 5634.\n4 JP-39      Kochi     (((134.2957 33.53032, 134.2732 33.508, 134.2446 33… 7092.\n\n\n応用例として、徳島県立総合教育センター(板野郡板野町犬伏字東谷1-7)から半径1km圏内にある避難場所を特定します。 まずは徳島県立総合教育センターの座標をst_point()関数内で定義し、ポイントデータを作成します。\n\nx <- \n  # 徳島県立総合教育センターの位置\n  st_sfc(st_point(c(134.452485, 34.150387)), \n         # 座標参照系の指定\n         crs = 4326)\n\n# 位置を確認\nmapview(x, map.types = \"OpenStreetMap\")\n\n\n\n\n\n次にst_buffer()関数でポイントからバッファを生成します。 ここで引数distにバッファの大きさを与えて実行します。 今回は半径1kmのバッファとしたいので、units::set_units(1, km)を与えます。\n\nx_buffer1km <- \n  st_buffer(x,\n            dist = units::set_units(1, km))\n\nmapview(x_buffer1km, map.types = \"OpenStreetMap\")\n\n\n\n\n\n\nsf_hinanjyo_neighborhood <- \n  st_join(\n  sf_hinanjyo,\n  st_sf(x_buffer1km),\n  left = FALSE)\n\nsf_hinanjyo_neighborhood\n\n# A tibble: 5 × 5\n  city   title                    address       type             geometry\n  <chr>  <chr>                    <chr>         <chr>         <POINT [°]>\n1 板野町 穂波園指定通所介護事業所 板野町吹田字… 指定…  (134.4555 34.1458)\n2 板野町 文化の館                 板野町犬伏字… 指定… (134.4534 34.14513)\n3 板野町 板野町体育センター       板野町吹田字… 指定… (134.4555 34.14728)\n4 板野町 犬伏老人憩の家           板野町犬伏字… 指定… (134.4506 34.14246)\n5 板野町 吹田老人憩の家           板野町吹田字… 指定… (134.4608 34.14848)\n\n\n5地点の避難場所が示されました。 これらの避難場所と徳島県立総合教育センターの距離をst_dist()関数で求めます。\n\nsf_hinanjyo_neighborhood <-\n  mutate(sf_hinanjyo_neighborhood,\n       distance = st_distance(geometry, x, by_element = FALSE))\n\n最後に、避難場所の位置関係も確認しておきましょう。 mapviewパッケージではggplot2パッケージのように描画対象のオブジェクトを+演算子を使って レイヤとして重ねられます。\n\nmapview(x_buffer1km) +\n  mapview(sf_hinanjyo_neighborhood,\n          zcol = \"distance\")\n\n\n\n\n\n\n大きなバッファの内側に対象の5地点の避難場所が含まれることが確認できました。"
  },
  {
    "objectID": "mapping.html#まとめ",
    "href": "mapping.html#まとめ",
    "title": "地図へのマッピング",
    "section": "5. まとめ",
    "text": "5. まとめ\n\n\n\n\n\n\n演習\n\n\n\n任意の地点の座標（緯度経度）を調べ、その地点から半径1km圏内にある避難場所を調べてみよう。"
  }
]